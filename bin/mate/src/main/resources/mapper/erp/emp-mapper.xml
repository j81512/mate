<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="emp">

	<insert id="insertEmp">
		insert into
			EMP
		values(
			#{ empId },
			#{ empPwd },
			#{ empName },
			#{ empAddr1 },
			#{ empAddr2 },
			#{ empAddr3 },
			#{ empPhone },
			default,		
			#{ status }
		)
	</insert>
	
	<select id="selectOneEmp" resultType="emp">
		select
			emp_id AS empId,
			emp_name AS empName,
			emp_pwd AS empPWD,
			addr1 AS empAddr1,
			addr2 AS empAddr2,
			addr3 AS empAddr3,
			phone AS empPhone,
			enroll_date AS empEnrollDate,
			status AS status
		from
			emp
		where
			emp_id = #{ empId }
	</select>
	
	<update id="infoUpdate">
		update
			emp
		<set>
			emp_id = #{ empId },
			<if test="empPwd != null">
			emp_pwd = #{ empPwd },
			</if>
			<if test="empName != null">
			emp_name = #{ empName },
			</if>
			<if test="empAddr1 != null">
			addr1 = #{ empAddr1 },
			</if>
			<if test="empAddr2 != null">
			addr2 = #{ empAddr2 },
			</if>
			<if test="empAddr3 != null">
			addr3 = #{ empAddr3 },
			</if>
			<if test="empPhone != null">
			phone = #{ empPhone },
			</if>
			<if test="status != null">
			status = #{ status }
			</if>
		</set>
		where
			emp_id = #{ empId }
	</update>
	
	<delete id="infoDelete">
		delete
		from
			emp
		where
			emp_id = #{ empId }
	</delete>
	
	<resultMap type="emp" id="empMap">
	
	</resultMap>
	
	<resultMap type="Product" id="productMap">
	
	</resultMap>
	

	<select id="empList" resultType="EMP">
		select
			emp_id AS empId,
			emp_name AS empName,
			addr2 AS empAddr2,
			phone AS empPhone,
			enroll_date AS empEnrollDate,
			status AS status
		from
			EMP
		order by
			enroll_date
	</select>
	
	<select id="ioLogList" resultType="ioLog">
		select
			*
		from
			Io_Log	
	</select>
	<select id="ioLogMapList" resultMap="salesMap">
		select
			*
		from(
			select
			    <if test="month == null">to_char(io_date, 'yyyyMM') io_date,</if>
			    <if test="month != null">to_char(io_date, 'yyyyMMdd') io_date,</if>
			    emp_id,
			    decode((select emp_name from emp where emp_id = I.emp_id), '본사관리자','온라인', (select emp_name from emp where emp_id = I.emp_id)) emp_name,
			    status,
			    product_no,
			    (select product_name from product where product_no = I.product_no) product_name,
			    (select price from product where product_no = I.product_no) price,
			    amount
			from
			    io_log I
			order by
			    io_date asc
			)
		<where>
			<if test="month == null">
		    	io_date like #{ year } || '%'		
			</if>
			<if test="month != null">
		    	io_date like #{year} || #{ month } || '%'		
			</if>
		</where>
	</select>
	<resultMap id="salesMap" type="map">
		<result column="io_date" property="ioDate"/>
		<result column="emp_id" property="empId"/>
		<result column="emp_name" property="empName"/>
		<result column="status" property="status"/>
		<result column="product_no" property="productNo"/>
		<result column="product_name" property="productName"/>
		<result column="price" property="price"/>
		<result column="amount" property="amount"/>
	</resultMap>
	
	<select id="empNameList" resultMap="empNameMap">
		select
			decode(emp_name,'본사관리자','온라인', emp_name) emp_name
		from
			emp
		where
			status != 2
			<if test="empId != 'admin'">
				and emp_id = #{empId}
			</if>
	</select>
	<resultMap id="empNameMap" type="map">
		<result column="emp_name" property="empName"/>
	</resultMap>
	
	<select id="yearList" resultType="string">
		select 
			*
		from(
			select 
				to_char(io_date, 'yyyy') io_date
			from 
				io_log
			)	
		group by io_date
		order by io_date
	</select>
	
	<select id="productList" resultType="Product">
		select
			*
		from
			Product
			
	</select>
	
	<select id="receiveList" resultType="Receive">
		select
			*
		from
			Receive
			
	</select>
	
	<select id="requestList" resultType="RequestLog">
		select
			*
		from
			Request_Log
	</select>

</mapper>